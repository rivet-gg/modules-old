// This file is auto-generated by the Open Game Backend (https://opengb.dev) build system.
//
// Do not edit this file directly.
//
// Generated at 2024-08-15T23:48:59.021Z

import * as runtime from "../../runtime";

import type {
	LobbiesCreateRequest,
	LobbiesCreateResponse,
} from "../../models/index";
import {
	LobbiesCreateRequestToJSON,
	LobbiesCreateResponseFromJSON,
} from "../../models/index";

import type {
	LobbiesDestroyRequest,
	LobbiesDestroyResponse,
} from "../../models/index";
import {
	LobbiesDestroyRequestToJSON,
	LobbiesDestroyResponseFromJSON,
} from "../../models/index";

import type {
	LobbiesFindOrCreateRequest,
	LobbiesFindOrCreateResponse,
} from "../../models/index";
import {
	LobbiesFindOrCreateRequestToJSON,
	LobbiesFindOrCreateResponseFromJSON,
} from "../../models/index";

import type {
	LobbiesJoinRequest,
	LobbiesJoinResponse,
} from "../../models/index";
import {
	LobbiesJoinRequestToJSON,
	LobbiesJoinResponseFromJSON,
} from "../../models/index";

import type {
	LobbiesListRequest,
	LobbiesListResponse,
} from "../../models/index";
import {
	LobbiesListRequestToJSON,
	LobbiesListResponseFromJSON,
} from "../../models/index";

import type {
	LobbiesSetLobbyReadyRequest,
	LobbiesSetLobbyReadyResponse,
} from "../../models/index";
import {
	LobbiesSetLobbyReadyRequestToJSON,
	LobbiesSetLobbyReadyResponseFromJSON,
} from "../../models/index";

import type {
	LobbiesSetPlayerConnectedRequest,
	LobbiesSetPlayerConnectedResponse,
} from "../../models/index";
import {
	LobbiesSetPlayerConnectedRequestToJSON,
	LobbiesSetPlayerConnectedResponseFromJSON,
} from "../../models/index";

import type {
	LobbiesSetPlayerDisconnectedRequest,
	LobbiesSetPlayerDisconnectedResponse,
} from "../../models/index";
import {
	LobbiesSetPlayerDisconnectedRequestToJSON,
	LobbiesSetPlayerDisconnectedResponseFromJSON,
} from "../../models/index";

import type {
	LobbiesFindRequest,
	LobbiesFindResponse,
} from "../../models/index";
import {
	LobbiesFindRequestToJSON,
	LobbiesFindResponseFromJSON,
} from "../../models/index";

import type {
	LobbiesForceGcRequest,
	LobbiesForceGcResponse,
} from "../../models/index";
import {
	LobbiesForceGcRequestToJSON,
	LobbiesForceGcResponseFromJSON,
} from "../../models/index";

import type {
	LobbiesListRegionsRequest,
	LobbiesListRegionsResponse,
} from "../../models/index";
import {
	LobbiesListRegionsRequestToJSON,
	LobbiesListRegionsResponseFromJSON,
} from "../../models/index";

import type {
	LobbiesFetchLobbyManagerStateRequest,
	LobbiesFetchLobbyManagerStateResponse,
} from "../../models/index";
import {
	LobbiesFetchLobbyManagerStateRequestToJSON,
	LobbiesFetchLobbyManagerStateResponseFromJSON,
} from "../../models/index";

import type {
	LobbiesResetLobbyManagerStateRequest,
	LobbiesResetLobbyManagerStateResponse,
} from "../../models/index";
import {
	LobbiesResetLobbyManagerStateRequestToJSON,
	LobbiesResetLobbyManagerStateResponseFromJSON,
} from "../../models/index";

export class Lobbies extends runtime.BaseAPI {
	public async create(
		request: LobbiesCreateRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<LobbiesCreateResponse> {
		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};
		headerParameters["Content-Type"] = "application/json";

		const response = await this.request({
			path: `/modules/lobbies/scripts/create/call`,
			method: "POST",
			headers: headerParameters,
			query: queryParameters,
			body: LobbiesCreateRequestToJSON(request),
		}, initOverrides);

		return LobbiesCreateResponseFromJSON(await response.json());
	}

	public async destroy(
		request: LobbiesDestroyRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<LobbiesDestroyResponse> {
		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};
		headerParameters["Content-Type"] = "application/json";

		const response = await this.request({
			path: `/modules/lobbies/scripts/destroy/call`,
			method: "POST",
			headers: headerParameters,
			query: queryParameters,
			body: LobbiesDestroyRequestToJSON(request),
		}, initOverrides);

		return LobbiesDestroyResponseFromJSON(await response.json());
	}

	public async findOrCreate(
		request: LobbiesFindOrCreateRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<LobbiesFindOrCreateResponse> {
		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};
		headerParameters["Content-Type"] = "application/json";

		const response = await this.request({
			path: `/modules/lobbies/scripts/find_or_create/call`,
			method: "POST",
			headers: headerParameters,
			query: queryParameters,
			body: LobbiesFindOrCreateRequestToJSON(request),
		}, initOverrides);

		return LobbiesFindOrCreateResponseFromJSON(await response.json());
	}

	public async join(
		request: LobbiesJoinRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<LobbiesJoinResponse> {
		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};
		headerParameters["Content-Type"] = "application/json";

		const response = await this.request({
			path: `/modules/lobbies/scripts/join/call`,
			method: "POST",
			headers: headerParameters,
			query: queryParameters,
			body: LobbiesJoinRequestToJSON(request),
		}, initOverrides);

		return LobbiesJoinResponseFromJSON(await response.json());
	}

	public async list(
		request: LobbiesListRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<LobbiesListResponse> {
		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};
		headerParameters["Content-Type"] = "application/json";

		const response = await this.request({
			path: `/modules/lobbies/scripts/list/call`,
			method: "POST",
			headers: headerParameters,
			query: queryParameters,
			body: LobbiesListRequestToJSON(request),
		}, initOverrides);

		return LobbiesListResponseFromJSON(await response.json());
	}

	public async setLobbyReady(
		request: LobbiesSetLobbyReadyRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<LobbiesSetLobbyReadyResponse> {
		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};
		headerParameters["Content-Type"] = "application/json";

		const response = await this.request({
			path: `/modules/lobbies/scripts/set_lobby_ready/call`,
			method: "POST",
			headers: headerParameters,
			query: queryParameters,
			body: LobbiesSetLobbyReadyRequestToJSON(request),
		}, initOverrides);

		return LobbiesSetLobbyReadyResponseFromJSON(await response.json());
	}

	public async setPlayerConnected(
		request: LobbiesSetPlayerConnectedRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<LobbiesSetPlayerConnectedResponse> {
		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};
		headerParameters["Content-Type"] = "application/json";

		const response = await this.request({
			path: `/modules/lobbies/scripts/set_player_connected/call`,
			method: "POST",
			headers: headerParameters,
			query: queryParameters,
			body: LobbiesSetPlayerConnectedRequestToJSON(request),
		}, initOverrides);

		return LobbiesSetPlayerConnectedResponseFromJSON(await response.json());
	}

	public async setPlayerDisconnected(
		request: LobbiesSetPlayerDisconnectedRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<LobbiesSetPlayerDisconnectedResponse> {
		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};
		headerParameters["Content-Type"] = "application/json";

		const response = await this.request({
			path: `/modules/lobbies/scripts/set_player_disconnected/call`,
			method: "POST",
			headers: headerParameters,
			query: queryParameters,
			body: LobbiesSetPlayerDisconnectedRequestToJSON(request),
		}, initOverrides);

		return LobbiesSetPlayerDisconnectedResponseFromJSON(await response.json());
	}

	public async find(
		request: LobbiesFindRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<LobbiesFindResponse> {
		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};
		headerParameters["Content-Type"] = "application/json";

		const response = await this.request({
			path: `/modules/lobbies/scripts/find/call`,
			method: "POST",
			headers: headerParameters,
			query: queryParameters,
			body: LobbiesFindRequestToJSON(request),
		}, initOverrides);

		return LobbiesFindResponseFromJSON(await response.json());
	}

	public async forceGc(
		request: LobbiesForceGcRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<LobbiesForceGcResponse> {
		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};
		headerParameters["Content-Type"] = "application/json";

		const response = await this.request({
			path: `/modules/lobbies/scripts/force_gc/call`,
			method: "POST",
			headers: headerParameters,
			query: queryParameters,
			body: LobbiesForceGcRequestToJSON(request),
		}, initOverrides);

		return LobbiesForceGcResponseFromJSON(await response.json());
	}

	public async listRegions(
		request: LobbiesListRegionsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<LobbiesListRegionsResponse> {
		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};
		headerParameters["Content-Type"] = "application/json";

		const response = await this.request({
			path: `/modules/lobbies/scripts/list_regions/call`,
			method: "POST",
			headers: headerParameters,
			query: queryParameters,
			body: LobbiesListRegionsRequestToJSON(request),
		}, initOverrides);

		return LobbiesListRegionsResponseFromJSON(await response.json());
	}

	public async fetchLobbyManagerState(
		request: LobbiesFetchLobbyManagerStateRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<LobbiesFetchLobbyManagerStateResponse> {
		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};
		headerParameters["Content-Type"] = "application/json";

		const response = await this.request({
			path: `/modules/lobbies/scripts/fetch_lobby_manager_state/call`,
			method: "POST",
			headers: headerParameters,
			query: queryParameters,
			body: LobbiesFetchLobbyManagerStateRequestToJSON(request),
		}, initOverrides);

		return LobbiesFetchLobbyManagerStateResponseFromJSON(await response.json());
	}

	public async resetLobbyManagerState(
		request: LobbiesResetLobbyManagerStateRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<LobbiesResetLobbyManagerStateResponse> {
		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};
		headerParameters["Content-Type"] = "application/json";

		const response = await this.request({
			path: `/modules/lobbies/scripts/reset_lobby_manager_state/call`,
			method: "POST",
			headers: headerParameters,
			query: queryParameters,
			body: LobbiesResetLobbyManagerStateRequestToJSON(request),
		}, initOverrides);

		return LobbiesResetLobbyManagerStateResponseFromJSON(await response.json());
	}
}
